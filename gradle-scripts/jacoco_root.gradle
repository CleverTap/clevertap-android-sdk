apply plugin: 'jacoco'
jacoco {
    toolVersion = "0.8.12"
}
tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

project.afterEvaluate {
    if (android.hasProperty("libraryVariants")) {
        android.libraryVariants.all { variant ->
            createVariantCoverage(variant)
        }
    }
}
ext.excludes = [
        // data binding
        'android/databinding/**/*.class',
        '**/android/databinding/*Binding.class',
        '**/android/databinding/*',
        '**/androidx/databinding/*',
        // android
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/*Test*.*',
        'android/**/*.*',
        // kotlin
        '**/*MapperImpl*.*',
        '**/*$ViewInjector*.*',
        '**/*$ViewBinder*.*',
        '**/*$Result.*',
        '**/*$Result$*.*',
        // CT ignore
        'com/clevertap/android/sdk/customviews/**',
        'com/clevertap/android/geofence/Logger*.*',
        'com/clevertap/android/sdk/Logger*.*',
        'com/clevertap/android/pushtemplates/content/**',
        'com/clevertap/android/pushtemplates/styles/**',
        'com/clevertap/android/sdk/InAppNotificationActivity*.*',
        'com/clevertap/android/sdk/inbox/CTInboxActivity*.*',
        'com/clevertap/android/sdk/inapp/InAppWebViewClient*.*',
        'com/clevertap/android/sdk/inapp/CTInAppHtmlFooterFragment*.*',
        'com/clevertap/android/sdk/inapp/CTInAppHtmlHeaderFragment*.*',
        'com/clevertap/android/sdk/inapp/CTInAppHtmlInterstitialFragment*.*',
        'com/clevertap/android/sdk/inapp/CTInAppHtmlHalfInterstitialFragment*.*',
        'com/clevertap/android/sdk/inapp/CTInAppBasePartialFragment*.*',
        'com/clevertap/android/sdk/inapp/CTInAppHtmlCoverFragment*.*',
        'com/clevertap/android/sdk/inapp/CTInAppNativeCoverFragment*.*',
        'com/clevertap/android/sdk/inapp/CTInAppBaseFullNativeFragment*.*',
        'com/clevertap/android/sdk/inapp/CTInAppBasePartialNativeFragment*.*',
        'com/clevertap/android/sdk/inapp/CTInAppNativeHeaderFragment*.*',
        'com/clevertap/android/sdk/inapp/CTInAppNativeFooterFragment*.*',
        'com/clevertap/android/sdk/inapp/CTInAppNativeInterstitialImageFragment*.*',
        'com/clevertap/android/sdk/inapp/CTInAppNativeCoverFragment*.*',
        'com/clevertap/android/sdk/inapp/CTInAppNativeHalfInterstitialImageFragment*.*',
        'com/clevertap/android/sdk/inapp/CTInAppBasePartialHtmlFragment*.*',
        'com/clevertap/android/sdk/inapp/CTInAppBaseFullHtmlFragment*.*',
        'com/clevertap/android/sdk/inapp/CTInAppBaseFullFragment*.*',
        'com/clevertap/android/sdk/inapp/CTInAppWebView*.*',
        'com/clevertap/android/sdk/inapp/CTInAppNativeHalfInterstitialFragment*.*',
        'com/clevertap/android/sdk/inapp/CTInAppNativeInterstitialFragment*.*',
        'com/clevertap/android/sdk/inapp/CTInAppNativeCoverImageFragment*.*',
        'com/clevertap/android/sdk/inbox/CTInboxTabAdapter*.*',
        'com/clevertap/android/sdk/inbox/CTCarouselViewPager*.*',
        'com/clevertap/android/sdk/inbox/CTInboxMessageAdapter*.*',
        'com/clevertap/android/sdk/inbox/CTCarouselViewPagerAdapter*.*',
        'com/clevertap/android/sdk/inbox/CTInboxButtonClickListener*.*',
        'com/clevertap/android/sdk/inbox/CTCarouselImageViewHolder*.*',
        'com/clevertap/android/sdk/inbox/CTCarouselMessageViewHolder*.*',
        'com/clevertap/android/sdk/inbox/CTInboxBaseMessageViewHolder*.*',
        'com/clevertap/android/sdk/inbox/CTSimpleMessageViewHolder*.*',
        'com/clevertap/android/sdk/inbox/CTIconMessageViewHolder*.*',
        'com/clevertap/android/hms/CTHmsMessageService*.*'
]
def createVariantCoverage(variant) {
    def variantName = variant.name
    def testTaskName = "test${variantName.capitalize()}UnitTest"

    // Add unit test coverage tasks
    tasks.create(name: "jacocoTestReport${variantName.capitalize()}", type: JacocoReport, dependsOn: "$testTaskName") {
        group = "Reporting"
        description = "Generate Jacoco coverage reports for the ${variantName.capitalize()} build."

        reports {
            html.required = true
            xml.required = true
        }

        def javaClasses = fileTree(dir: variant.javaCompileProvider.get().destinationDir, excludes: project.excludes)
        def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${variantName}", excludes: project.excludes)
        getClassDirectories().setFrom(files([javaClasses, kotlinClasses]))

        getSourceDirectories().setFrom(files([
                "$project.projectDir/src/main/java",
                "$project.projectDir/src/${variantName}/java",
                "$project.projectDir/src/main/kotlin",
                "$project.projectDir/src/${variantName}/kotlin"
        ]))

        getExecutionData().setFrom(files("${project.buildDir}/outputs/unit_test_code_coverage/${variantName}UnitTest/${testTaskName}.exec"))
    }
}