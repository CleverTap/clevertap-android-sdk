apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.vanniktech.maven.publish'
apply from: "${project.rootDir}/gradle-scripts/jacoco_root.gradle"
apply from: "${project.rootDir}/gradle-scripts/checkstyle.gradle"
apply from: "${project.rootDir}/gradle-scripts/detekt.gradle"

ext {
    publishedGroupId = 'com.clevertap.android'

    siteUrl = 'https://github.com/CleverTap/clevertap-android-sdk'
    gitUrl = 'https://github.com/CleverTap/clevertap-android-sdk.git'

    developerId = 'clevertap'
    developerName = 'CleverTap'
    developerEmail = 'support@clevertap.com'
}

version = libraryVersion
group = publishedGroupId

def (major,minor,patch) = libraryVersion.split("\\.")

android {
    compileSdk libs.versions.android.compileSdk.get().toInteger()

    defaultConfig {
        minSdkVersion libs.versions.android.minSdk.get().toInteger()
        versionCode "${major}0${minor}0${patch}".toInteger()
        versionName libraryVersion

        //AGP 4.1.0 change https://developer.android.com/studio/releases/gradle-plugin#version_properties_removed_from_buildconfig_class_in_library_projects
        buildConfigField ("int", "VERSION_CODE", "$versionCode")
        buildConfigField ("String", "VERSION_NAME", "\"$versionName\"")

        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        debug {
            //only true when a command is run with argument, like this : `gradle <command>  -Pcoverage='true'
            if(project.hasProperty('coverage')&& project.property('coverage')=='true') {
                System.out.println("coverage="+project.property('coverage'))
                testCoverageEnabled = true
            }
            buildConfigField "String", "SDK_VERSION_STRING",
                    "\"!SDK-VERSION-STRING!:$publishedGroupId:$artifact:$major.$minor.$patch.0\""
        }
        release {
            //only true when a command is run with argument, like this : `gradle <command>  -Pcoverage='true'
            if(project.hasProperty('coverage') && project.property('coverage')=='true') {
                System.out.println("coverage="+project.property('coverage'))
                testCoverageEnabled = true
            }
            buildConfigField "String", "SDK_VERSION_STRING",
                    "\"!SDK-VERSION-STRING!:$publishedGroupId:$artifact:$major.$minor.$patch.0\""
            minifyEnabled false// keep it false we will supply proguard through consumerProguardFiles
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

    libraryVariants.all { variant ->
        variant.outputs.all {
            if (variant.getName().toLowerCase().contains('release')) {
                outputFileName = "${artifact}-${libraryVersion}.aar"
            } else if (variant.getName().toLowerCase().contains('debug')) {
                outputFileName = "${artifact}-${variant.name}-${libraryVersion}.aar"
            }
        }
    }

    testOptions {
        animationsDisabled true
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
            all {
                jvmArgs '-noverify'
            }
        }
    }
}

Properties properties = new Properties()
if (project.rootProject.file('local.properties').exists()) {
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    properties.each { name, value ->
        ext[name] = value
    }
}


afterEvaluate {
    mavenPublishing {
        publishToMavenCentral("CENTRAL_PORTAL")
        signAllPublications()

        coordinates(publishedGroupId, artifact, libraryVersion)

        pom {
            name.set("$artifact")
            description.set("$libraryDescription")
            url.set(siteUrl)

            licenses {
                license {
                    name.set(licenseName)
                    url.set(licenseUrl)
                }
            }

            developers {
                developer {
                    id.set(developerId)
                    name.set(developerName)
                    email.set(developerEmail)
                }
            }

            scm {
                connection.set("scm:git:$gitUrl")
                developerConnection.set("scm:git:$gitUrl")
                url.set(siteUrl)
            }
        }
    }
}
