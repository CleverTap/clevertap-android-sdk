name: Trigger Automation from PR Comment

on:
  # Original PR comment trigger for production
  issue_comment:
    types: [created]

  # TESTING: Add push trigger for testing changes without merging to main
  # TODO: Remove after testing is complete
  push:
    branches:
      - 'test/**'      # For testing branches like test/workflow-fixes
      - 'action/**'    # Consistent with other workflows
    paths:
      - '.github/workflows/trigger-automation-from-comment.yml'

jobs:
  parse-and-trigger:
    # Enhanced condition to handle different trigger types
    if: |
      (github.event_name == 'issue_comment' && github.event.issue.pull_request && contains(github.event.comment.body, 'run test automation')) ||
      (github.event_name == 'push')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Set testing context
        id: set_context
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            echo "🧪 TESTING MODE: Push trigger detected"
            echo "testing_mode=true" >> $GITHUB_OUTPUT
            echo "trigger_type=push" >> $GITHUB_OUTPUT
          
            # Set all default test values for push trigger
            echo "COMMENT_BODY=run test automation on debug build, variables tests" >> $GITHUB_ENV
            echo "PR_NUMBER=999" >> $GITHUB_ENV
            echo "PR_BRANCH=${{ github.ref_name }}" >> $GITHUB_ENV  # Use actual push branch
            echo "PR_TITLE=Test PR from push trigger - ${{ github.ref_name }}" >> $GITHUB_ENV
            echo "PR_AUTHOR=${{ github.actor }}" >> $GITHUB_ENV
            # Create a long comment ID for testing (simulating real GitHub comment ID)
            LONG_COMMENT_ID="${{ github.run_id }}${{ github.run_number }}999"
            echo "COMMENT_ID=$LONG_COMMENT_ID" >> $GITHUB_ENV

            # Derive QA_VERSION from comment ID using same logic as production
            QA_VERSION_INT="${LONG_COMMENT_ID: -6}"  # Last 6 digits
            echo "QA_VERSION=$QA_VERSION_INT" >> $GITHUB_ENV

            echo "🔢 Testing conversion: COMMENT_ID $LONG_COMMENT_ID → QA_VERSION $QA_VERSION_INT"
            echo "COMMENT_AUTHOR=${{ github.actor }}" >> $GITHUB_ENV
            echo "COMMENT_URL=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_ENV
            echo "TRIGGERED_AT=${{ github.event.head_commit.timestamp }}" >> $GITHUB_ENV
          
            echo "🤖 Using default values for push trigger:"
            echo "  Comment: run test automation on debug build, variables tests"
            echo "  PR Number: 999 (test)"
            echo "  PR Branch: ${{ github.ref_name }}"
            echo "  PR Author: ${{ github.actor }}"
            echo "  Comment ID: $LONG_COMMENT_ID"
            echo "  QA Version: $QA_VERSION_INT (derived from comment ID)"
          
          else
            echo "🚀 PRODUCTION MODE: PR comment trigger"
            echo "testing_mode=false" >> $GITHUB_OUTPUT
            echo "trigger_type=pr_comment" >> $GITHUB_OUTPUT
          
            # Use actual PR comment data - safer approach with printf
            # Convert long comment ID to 6-digit QA version
            COMMENT_ID_LONG='${{ github.event.comment.id }}'
            QA_VERSION_INT="${COMMENT_ID_LONG: -6}"  # Last 6 digits
          
            # Use printf for safer handling of user input
            printf "COMMENT_BODY=%s\n" '${{ github.event.comment.body }}' >> $GITHUB_ENV
            printf "PR_NUMBER=%s\n" '${{ github.event.issue.number }}' >> $GITHUB_ENV
            printf "COMMENT_ID=%s\n" "$COMMENT_ID_LONG" >> $GITHUB_ENV
            printf "QA_VERSION=%s\n" "$QA_VERSION_INT" >> $GITHUB_ENV
            printf "COMMENT_AUTHOR=%s\n" '${{ github.event.comment.user.login }}' >> $GITHUB_ENV
            printf "COMMENT_URL=%s\n" '${{ github.event.comment.html_url }}' >> $GITHUB_ENV
            printf "TRIGGERED_AT=%s\n" '${{ github.event.comment.created_at }}' >> $GITHUB_ENV
          
            echo "🔢 Converted COMMENT_ID $COMMENT_ID_LONG to QA_VERSION: $QA_VERSION_INT"
          fi
          
          echo "📋 Context: ${{ github.event_name }} trigger"

      - name: Check comment format and extract parameters
        id: parse_comment
        env:
          COMMENT_BODY: ${{ env.COMMENT_BODY }}
        run: |
          echo "📝 Processing comment (length: ${#COMMENT_BODY})"
          echo "🔍 Trigger type: ${{ steps.set_context.outputs.trigger_type }}"
          
          # Add testing mode indicator
          if [ "${{ steps.set_context.outputs.testing_mode }}" == "true" ]; then
            echo "⚠️  TESTING MODE: Using default comment data"
            echo "💬 Comment: $COMMENT_BODY"
          fi
          
          # Sanitize input - only allow alphanumeric, spaces, hyphens, and basic punctuation
          if echo "$COMMENT_BODY" | grep -q '[^a-zA-Z0-9 \-,.]'; then
            echo "❌ Comment contains invalid characters."
            echo "valid_comment=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Parse comment using regex pattern: "run test automation on {buildType} build, {testSuite} tests"
          # Use printf to safely handle the string and avoid command injection
          if printf '%s\n' "$COMMENT_BODY" | grep -qiE "run test automation on (debug|release) build, (all|variables|push-notifications|app-inbox) tests"; then
          
            # Extract buildType (debug or release) - use printf for safety
            BUILD_TYPE=$(printf '%s\n' "$COMMENT_BODY" | grep -oiE "(debug|release)" | tr '[:upper:]' '[:lower:]' | head -1)
          
            # Extract testSuite - use printf for safety
            TEST_SUITE=$(printf '%s\n' "$COMMENT_BODY" | grep -oiE "(all|variables|push-notifications|app-inbox)" | tr '[:upper:]' '[:lower:]' | head -1)
          
            # Additional validation - ensure extracted values are exactly what we expect
            case "$BUILD_TYPE" in
              "debug"|"release")
                echo "✅ Valid build type extracted: $BUILD_TYPE"
                ;;
              *)
                echo "❌ Invalid build type extracted: $BUILD_TYPE"
                echo "valid_comment=false" >> $GITHUB_OUTPUT
                exit 0
                ;;
            esac
          
            case "$TEST_SUITE" in
              "all"|"variables"|"push-notifications"|"app-inbox")
                echo "✅ Valid test suite extracted: $TEST_SUITE"
                ;;
              *)
                echo "❌ Invalid test suite extracted: $TEST_SUITE"
                echo "valid_comment=false" >> $GITHUB_OUTPUT
                exit 0
                ;;
            esac
          
            if [ -n "$BUILD_TYPE" ] && [ -n "$TEST_SUITE" ]; then
              echo "✅ Valid automation trigger comment detected!"
              echo "🔧 Build Type: $BUILD_TYPE"
              echo "🧪 Test Suite: $TEST_SUITE"
          
              # Add testing mode context
              if [ "${{ steps.set_context.outputs.testing_mode }}" == "true" ]; then
                echo "⚠️  TESTING: This is a simulated trigger for workflow testing"
              fi
          
              echo "valid_comment=true" >> $GITHUB_OUTPUT
              echo "build_type=$BUILD_TYPE" >> $GITHUB_OUTPUT
              echo "test_suite=$TEST_SUITE" >> $GITHUB_OUTPUT
            else
              echo "❌ Could not extract buildType or testSuite from comment"
              echo "valid_comment=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "ℹ️ Comment does not match automation trigger pattern"
            echo "Expected format: 'run test automation on {debug|release} build, {all|variables|push-notifications|app-inbox} tests'"
            echo "valid_comment=false" >> $GITHUB_OUTPUT
          fi

      - name: Get PR information
        id: pr_info
        if: steps.parse_comment.outputs.valid_comment == 'true'
        run: |
          if [ "${{ steps.set_context.outputs.trigger_type }}" == "pr_comment" ]; then
            # Production mode: Get real PR details using GitHub API
            PR_NUMBER="${{ env.PR_NUMBER }}"
            REPO_OWNER="${{ github.repository_owner }}"
            REPO_NAME="${{ github.event.repository.name }}"
          
            echo "📋 Fetching real PR #$PR_NUMBER details..."
          
            # Get PR information
            PR_DATA=$(curl -s \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/pulls/$PR_NUMBER")
          
            # Extract branch name
            BRANCH_NAME=$(echo "$PR_DATA" | jq -r '.head.ref')
            PR_TITLE=$(echo "$PR_DATA" | jq -r '.title')
            PR_AUTHOR=$(echo "$PR_DATA" | jq -r '.user.login')
          
            if [ "$BRANCH_NAME" == "null" ] || [ -z "$BRANCH_NAME" ]; then
              echo "❌ Could not extract branch name from PR"
              exit 1
            fi
          else
            # Testing mode: Use simulated data
            BRANCH_NAME="${{ env.PR_BRANCH }}"
            PR_TITLE="${{ env.PR_TITLE }}"
            PR_AUTHOR="${{ env.PR_AUTHOR }}"
          
            echo "🧪 Using simulated PR data for testing:"
          fi
          
          echo "pr_branch=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT
          echo "pr_author=$PR_AUTHOR" >> $GITHUB_OUTPUT
          echo "comment_id=${{ env.COMMENT_ID }}" >> $GITHUB_OUTPUT
          
          echo "✅ PR Information extracted:"
          echo "🌿 Branch: $BRANCH_NAME"
          echo "📝 Title: $PR_TITLE" 
          echo "👤 Author: $PR_AUTHOR"
          echo "💬 Comment ID: ${{ env.COMMENT_ID }}"
          echo "🔢 QA Version: ${{ env.QA_VERSION }}"
          
          # Add testing context
          if [ "${{ steps.set_context.outputs.testing_mode }}" == "true" ]; then
            echo "⚠️  TESTING MODE: Using simulated PR information"
            echo "🔄 Trigger type: ${{ steps.set_context.outputs.trigger_type }}"
          fi

      - name: Validate build parameters
        id: validate_params
        if: steps.parse_comment.outputs.valid_comment == 'true'
        run: |
          BUILD_TYPE="${{ steps.parse_comment.outputs.build_type }}"
          TEST_SUITE="${{ steps.parse_comment.outputs.test_suite }}"
          BRANCH_NAME="${{ steps.pr_info.outputs.pr_branch }}"
          
          echo "🔍 Validating extracted parameters..."
          
          # Add testing mode indicator
          if [ "${{ steps.set_context.outputs.testing_mode }}" == "true" ]; then
            echo "🧪 TESTING MODE: Validating simulated parameters"
          fi
          
          # Validate buildType
          case $BUILD_TYPE in
            "debug"|"release")
              echo "✅ Valid build type: $BUILD_TYPE"
              ;;
            *)
              echo "❌ Invalid build type: $BUILD_TYPE"
              echo "valid_params=false" >> $GITHUB_OUTPUT
              exit 1
              ;;
          esac
          
          # Validate testSuite
          case $TEST_SUITE in
            "all"|"variables"|"push-notifications"|"app-inbox")
              echo "✅ Valid test suite: $TEST_SUITE"
              ;;
            *)
              echo "❌ Invalid test suite: $TEST_SUITE"
              echo "valid_params=false" >> $GITHUB_OUTPUT
              exit 1
              ;;
          esac
          
          # Validate branch name
          if [ -n "$BRANCH_NAME" ] && [ "$BRANCH_NAME" != "null" ]; then
            echo "✅ Valid branch name: $BRANCH_NAME"
          else
            echo "❌ Invalid branch name: $BRANCH_NAME"
            echo "valid_params=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "valid_params=true" >> $GITHUB_OUTPUT
          echo "🎯 All parameters validated successfully!"

      - name: Add reaction to comment (skip in testing mode)
        if: steps.parse_comment.outputs.valid_comment == 'true' && steps.set_context.outputs.trigger_type == 'pr_comment'
        run: |
          # Add 🚀 reaction to indicate we're processing the comment
          curl -s \
            -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/comments/${{ env.COMMENT_ID }}/reactions" \
            -d '{"content":"rocket"}'
          
          echo "🚀 Added rocket reaction to comment"

      - name: Prepare repository dispatch payload
        if: steps.validate_params.outputs.valid_params == 'true'
        id: prepare_payload
        env:
          PR_BRANCH: ${{ steps.pr_info.outputs.pr_branch }}
          PR_TITLE: ${{ steps.pr_info.outputs.pr_title }}
          PR_AUTHOR: ${{ steps.pr_info.outputs.pr_author }}
          COMMENT_AUTHOR: ${{ env.COMMENT_AUTHOR }}
          COMMENT_URL: ${{ env.COMMENT_URL }}
          BUILD_TYPE: ${{ steps.parse_comment.outputs.build_type }}
          TEST_SUITE: ${{ steps.parse_comment.outputs.test_suite }}
          SOURCE_REPO: ${{ github.repository }}
          TRIGGERED_AT: ${{ env.TRIGGERED_AT }}
        run: |
          # Add testing mode indicator to payload
          if [ "${{ steps.set_context.outputs.testing_mode }}" == "true" ]; then
            TESTING_FLAG=true
            TRIGGER_TYPE="${{ steps.set_context.outputs.trigger_type }}"
            echo "🧪 TESTING MODE: Including testing flags in payload"
          else
            TESTING_FLAG=false
            TRIGGER_TYPE="pr_comment"
          fi
          
          # Construct JSON payload safely using jq to handle escaping
          PAYLOAD=$(jq -n \
            --arg sdkRepoBranch "$PR_BRANCH" \
            --arg buildOutput "apk" \
            --arg buildType "$BUILD_TYPE" \
            --argjson qaVersion "${{ env.QA_VERSION }}" \
            --argjson triggerAutomation true \
            --arg testSuite "$TEST_SUITE" \
            --arg sourceRepo "$SOURCE_REPO" \
            --argjson prNumber "${{ env.PR_NUMBER }}" \
            --arg prTitle "$PR_TITLE" \
            --arg prAuthor "$PR_AUTHOR" \
            --arg commentAuthor "$COMMENT_AUTHOR" \
            --argjson commentId "${{ env.COMMENT_ID }}" \
            --arg commentUrl "$COMMENT_URL" \
            --arg triggeredAt "$TRIGGERED_AT" \
            --argjson testingMode "$TESTING_FLAG" \
            --arg triggerType "$TRIGGER_TYPE" \
            '{
              "workflow_inputs": {
                "sdkRepoBranch": $sdkRepoBranch,
                "buildOutput": $buildOutput,
                "buildType": $buildType,
                "qaVersion": $qaVersion,
                "triggerAutomation": $triggerAutomation,
                "testSuite": $testSuite
              },
              "trigger_info": {
                "source_repo": $sourceRepo,
                "pr_number": $prNumber,
                "pr_title": $prTitle,
                "pr_author": $prAuthor,
                "comment_author": $commentAuthor,
                "comment_id": $commentId,
                "comment_url": $commentUrl,
                "triggered_at": $triggeredAt,
                "testing_mode": $testingMode,
                "trigger_type": $triggerType
              }
            }')
          
          echo "📋 Generated safely escaped JSON payload:"
          echo "$PAYLOAD" | jq '.'
          
          # Save the payload for the next step
          echo "payload<<EOF" >> $GITHUB_OUTPUT
          echo "$PAYLOAD" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Trigger Bearded Robot Build
        if: steps.validate_params.outputs.valid_params == 'true'
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.PAT_CTApps }}
          repository: CleverTap/CT-Apps
          event-type: trigger-from-sdk-comment
          client-payload: ${{ steps.prepare_payload.outputs.payload }}

      - name: Create workflow summary
        if: steps.validate_params.outputs.valid_params == 'true'
        run: |
          echo "## 🚀 Automation Triggered from SDK PR Comment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add testing mode indicator
          if [ "${{ steps.set_context.outputs.testing_mode }}" == "true" ]; then
            echo "### ⚠️ TESTING MODE" >> $GITHUB_STEP_SUMMARY
            echo "This workflow was triggered in **testing mode** via **${{ steps.set_context.outputs.trigger_type }}**" >> $GITHUB_STEP_SUMMARY
            echo "Using simulated PR data for testing workflow changes." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Trigger Type** | ${{ steps.set_context.outputs.trigger_type }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Testing Mode** | ${{ steps.set_context.outputs.testing_mode }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **PR Number** | #${{ env.PR_NUMBER }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **PR Branch** | \`${{ steps.pr_info.outputs.pr_branch }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **PR Author** | ${{ steps.pr_info.outputs.pr_author }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Comment Author** | ${{ env.COMMENT_AUTHOR }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Build Type** | ${{ steps.parse_comment.outputs.build_type }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Test Suite** | ${{ steps.parse_comment.outputs.test_suite }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **QA Version** | ${{ env.QA_VERSION }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Comment ID** | ${{ env.COMMENT_ID }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Build Output** | apk |" >> $GITHUB_STEP_SUMMARY
          echo "| **Trigger Automation** | true |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Successfully triggered Bearded Robot build workflow!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 Monitor the build progress in the [Bearded Robot repository](https://github.com/CleverTap/CT-Apps/actions)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.set_context.outputs.testing_mode }}" == "true" ]; then
            echo "**Testing Context:** This was a simulated trigger using test data" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Original Comment:** ${{ env.COMMENT_URL }}" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment on PR with trigger confirmation (skip in testing mode)
        if: steps.validate_params.outputs.valid_params == 'true' && steps.set_context.outputs.trigger_type == 'pr_comment'
        env:
          PR_BRANCH: ${{ steps.pr_info.outputs.pr_branch }}
          BUILD_TYPE: ${{ steps.parse_comment.outputs.build_type }}
          TEST_SUITE: ${{ steps.parse_comment.outputs.test_suite }}
          COMMENT_AUTHOR: ${{ env.COMMENT_AUTHOR }}
        run: |
          # Create comment body safely
          COMMENT_BODY="🚀 **Automation Triggered Successfully!**

          **Parameters Extracted:**
          - **SDK Branch**: \`$PR_BRANCH\`
          - **Build Type**: \`$BUILD_TYPE\`
          - **Test Suite**: \`$TEST_SUITE\`
          - **QA Version**: \`${{ env.QA_VERSION }}\`

          **Next Steps:**
          1. 🏗️ [Bearded Robot build](https://github.com/CleverTap/CT-Apps/actions) will start with your SDK branch
          2. 📱 APK will be uploaded to BrowserStack
          3. 🧪 Automation tests will run on specified devices (controlled by TestNG XML files)

          **Monitor Progress:**
          - [Build Workflow](https://github.com/CleverTap/CT-Apps/actions)
          - [Automation Workflow](https://github.com/CleverTap-SDK/CleverTap-SDK-Automation/actions)

          _Triggered by: @$COMMENT_AUTHOR_"

          # Use jq to safely construct JSON payload
          COMMENT_PAYLOAD=$(jq -n --arg body "$COMMENT_BODY" '{"body": $body}')
          
          curl -s \
            -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ env.PR_NUMBER }}/comments" \
            -d "$COMMENT_PAYLOAD" \
            --fail-with-body
          
          if [ $? -eq 0 ]; then
            echo "💬 Posted confirmation comment to PR"
          else
            echo "❌ Failed to post confirmation comment"
          fi

      - name: Handle invalid comment format (skip in testing mode)
        if: steps.parse_comment.outputs.valid_comment == 'false' && steps.set_context.outputs.trigger_type == 'pr_comment'
        env:
          COMMENT_BODY: ${{ env.COMMENT_BODY }}
        run: |
          # Only respond if the comment contained "run test automation" but was malformed
          # Use printf for safe string handling
          if printf '%s\n' "$COMMENT_BODY" | grep -qi "run test automation"; then
          
            HELP_COMMENT="❌ **Invalid automation trigger format**

            **Expected format:**
            \`\`\`
            run test automation on {buildType} build, {testSuite} tests
            \`\`\`

            **Valid options:**
            - **buildType**: \`debug\` or \`release\`
            - **testSuite**: \`all\`, \`variables\`, \`push-notifications\`, or \`app-inbox\`

            **Examples:**
            - \`run test automation on debug build, variables tests\`
            - \`run test automation on release build, all tests\`
            - \`run test automation on debug build, push-notifications tests\`
          
            Please correct your comment format and try again.

            _Note: Comment parsing is case-insensitive_"

            # Use jq to safely construct JSON payload
            HELP_PAYLOAD=$(jq -n --arg body "$HELP_COMMENT" '{"body": $body}')
          
            curl -s \
              -X POST \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Content-Type: application/json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ env.PR_NUMBER }}/comments" \
              -d "$HELP_PAYLOAD" \
              --fail-with-body
          
            if [ $? -eq 0 ]; then
              echo "💬 Posted help comment for invalid format"
            else
              echo "❌ Failed to post help comment"
            fi
          fi

      - name: Testing mode summary
        if: always() && steps.set_context.outputs.testing_mode == 'true'
        run: |
          echo "## 🧪 Testing Mode Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This workflow was executed in **TESTING MODE**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Testing Detail | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Trigger Type** | ${{ steps.set_context.outputs.trigger_type }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Branch** | ${{ github.ref_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Comment** | \`${{ env.COMMENT_BODY }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **PR Number** | #${{ env.PR_NUMBER }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **QA Version** | ${{ env.QA_VERSION }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Comment ID** | ${{ env.COMMENT_ID }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Status** | ${{ job.status }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps for Production:**" >> $GITHUB_STEP_SUMMARY
          echo "1. ✅ Test the workflow logic" >> $GITHUB_STEP_SUMMARY
          echo "2. 🔄 Remove testing triggers when satisfied" >> $GITHUB_STEP_SUMMARY
          echo "3. 🚀 Deploy to main branch" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Remember to:**" >> $GITHUB_STEP_SUMMARY
          echo "- Remove the \`push\` trigger after testing" >> $GITHUB_STEP_SUMMARY