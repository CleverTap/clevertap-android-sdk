name: Trigger Automation from PR Comment

on:
  issue_comment:
    types: [created]

jobs:
  parse-and-trigger:
    # Only run on PR comments (not regular issues)
    if: github.event.issue.pull_request && contains(github.event.comment.body, 'run test automation')
    runs-on: ubuntu-latest

    steps:
      - name: Check comment format and extract parameters
        id: parse_comment
        run: |
          COMMENT_BODY="${{ github.event.comment.body }}"
          echo "📝 Processing comment: $COMMENT_BODY"
          
          # Parse comment using regex pattern: "run test automation on {buildType} build, {testSuite} tests"
          # Flexible patterns to handle variations
          if echo "$COMMENT_BODY" | grep -qiE "run test automation on (debug|release) build, (all|variables|push-notifications|app-inbox) tests"; then
          
            # Extract buildType (debug or release)
            BUILD_TYPE=$(echo "$COMMENT_BODY" | grep -oiE "(debug|release)" | tr '[:upper:]' '[:lower:]' | head -1)
          
            # Extract testSuite
            TEST_SUITE=$(echo "$COMMENT_BODY" | grep -oiE "(all|variables|push-notifications|app-inbox)" | tr '[:upper:]' '[:lower:]' | head -1)
          
            if [ -n "$BUILD_TYPE" ] && [ -n "$TEST_SUITE" ]; then
              echo "✅ Valid automation trigger comment detected!"
              echo "🔧 Build Type: $BUILD_TYPE"
              echo "🧪 Test Suite: $TEST_SUITE"
          
              echo "valid_comment=true" >> $GITHUB_OUTPUT
              echo "build_type=$BUILD_TYPE" >> $GITHUB_OUTPUT
              echo "test_suite=$TEST_SUITE" >> $GITHUB_OUTPUT
            else
              echo "❌ Could not extract buildType or testSuite from comment"
              echo "valid_comment=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "ℹ️ Comment does not match automation trigger pattern"
            echo "Expected format: 'run test automation on {debug|release} build, {all|variables|push-notifications|app-inbox} tests'"
            echo "valid_comment=false" >> $GITHUB_OUTPUT
          fi

      - name: Get PR information
        id: pr_info
        if: steps.parse_comment.outputs.valid_comment == 'true'
        run: |
          # Get PR details using GitHub API
          PR_NUMBER="${{ github.event.issue.number }}"
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME="${{ github.event.repository.name }}"
          
          echo "📋 Fetching PR #$PR_NUMBER details..."
          
          # Get PR information
          PR_DATA=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/pulls/$PR_NUMBER")
          
          # Extract branch name
          BRANCH_NAME=$(echo "$PR_DATA" | jq -r '.head.ref')
          PR_TITLE=$(echo "$PR_DATA" | jq -r '.title')
          PR_AUTHOR=$(echo "$PR_DATA" | jq -r '.user.login')
          
          if [ "$BRANCH_NAME" == "null" ] || [ -z "$BRANCH_NAME" ]; then
            echo "❌ Could not extract branch name from PR"
            exit 1
          fi
          
          echo "pr_branch=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT
          echo "pr_author=$PR_AUTHOR" >> $GITHUB_OUTPUT
          echo "comment_id=${{ github.event.comment.id }}" >> $GITHUB_OUTPUT
          
          echo "✅ PR Information extracted:"
          echo "🌿 Branch: $BRANCH_NAME"
          echo "📝 Title: $PR_TITLE" 
          echo "👤 Author: $PR_AUTHOR"
          echo "💬 Comment ID: ${{ github.event.comment.id }}"

      - name: Validate build parameters
        id: validate_params
        if: steps.parse_comment.outputs.valid_comment == 'true'
        run: |
          BUILD_TYPE="${{ steps.parse_comment.outputs.build_type }}"
          TEST_SUITE="${{ steps.parse_comment.outputs.test_suite }}"
          BRANCH_NAME="${{ steps.pr_info.outputs.pr_branch }}"
          
          echo "🔍 Validating extracted parameters..."
          
          # Validate buildType
          case $BUILD_TYPE in
            "debug"|"release")
              echo "✅ Valid build type: $BUILD_TYPE"
              ;;
            *)
              echo "❌ Invalid build type: $BUILD_TYPE"
              echo "valid_params=false" >> $GITHUB_OUTPUT
              exit 1
              ;;
          esac
          
          # Validate testSuite
          case $TEST_SUITE in
            "all"|"variables"|"push-notifications"|"app-inbox")
              echo "✅ Valid test suite: $TEST_SUITE"
              ;;
            *)
              echo "❌ Invalid test suite: $TEST_SUITE"
              echo "valid_params=false" >> $GITHUB_OUTPUT
              exit 1
              ;;
          esac
          
          # Validate branch name
          if [ -n "$BRANCH_NAME" ] && [ "$BRANCH_NAME" != "null" ]; then
            echo "✅ Valid branch name: $BRANCH_NAME"
          else
            echo "❌ Invalid branch name: $BRANCH_NAME"
            echo "valid_params=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "valid_params=true" >> $GITHUB_OUTPUT
          echo "🎯 All parameters validated successfully!"

      - name: Add reaction to comment
        if: steps.parse_comment.outputs.valid_comment == 'true'
        run: |
          # Add 🚀 reaction to indicate we're processing the comment
          curl -s \
            -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/comments/${{ steps.pr_info.outputs.comment_id }}/reactions" \
            -d '{"content":"rocket"}'
          
          echo "🚀 Added rocket reaction to comment"

      - name: Trigger Bearded Robot Build
        if: steps.validate_params.outputs.valid_params == 'true'
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.PAT_CTApps }}  # Need PAT with repo access
          repository: CleverTap/CT-Apps
          event-type: trigger-from-sdk-comment
          client-payload: |
            {
              "workflow_inputs": {
                "sdkRepoBranch": "${{ steps.pr_info.outputs.pr_branch }}",
                "buildOutput": "apk",
                "buildType": "${{ steps.parse_comment.outputs.build_type }}",
                "qaVersion": ${{ github.event.comment.id }},
                "triggerAutomation": true,
                "testSuite": "${{ steps.parse_comment.outputs.test_suite }}"
              },
              "trigger_info": {
                "source_repo": "${{ github.repository }}",
                "pr_number": ${{ github.event.issue.number }},
                "pr_title": "${{ steps.pr_info.outputs.pr_title }}",
                "pr_author": "${{ steps.pr_info.outputs.pr_author }}",
                "comment_author": "${{ github.event.comment.user.login }}",
                "comment_id": ${{ github.event.comment.id }},
                "comment_url": "${{ github.event.comment.html_url }}",
                "triggered_at": "${{ github.event.comment.created_at }}"
              }
            }

      - name: Create workflow summary
        if: steps.validate_params.outputs.valid_params == 'true'
        run: |
          echo "## 🚀 Automation Triggered from SDK PR Comment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **PR Number** | #${{ github.event.issue.number }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **PR Branch** | \`${{ steps.pr_info.outputs.pr_branch }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **PR Author** | ${{ steps.pr_info.outputs.pr_author }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Comment Author** | ${{ github.event.comment.user.login }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Build Type** | ${{ steps.parse_comment.outputs.build_type }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Test Suite** | ${{ steps.parse_comment.outputs.test_suite }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **QA Version** | ${{ github.event.comment.id }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Build Output** | apk |" >> $GITHUB_STEP_SUMMARY
          echo "| **Trigger Automation** | true |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Successfully triggered Bearded Robot build workflow!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 Monitor the build progress in the [Bearded Robot repository](https://github.com/CleverTap/BeardedRobot/actions)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Original Comment:** ${{ github.event.comment.html_url }}" >> $GITHUB_STEP_SUMMARY

      - name: Comment on PR with trigger confirmation
        if: steps.validate_params.outputs.valid_params == 'true'
        run: |
          # Post a comment back to the PR confirming the trigger
          COMMENT_BODY="🚀 **Automation Triggered Successfully!**

          **Parameters Extracted:**
          - **SDK Branch**: \`${{ steps.pr_info.outputs.pr_branch }}\`
          - **Build Type**: \`${{ steps.parse_comment.outputs.build_type }}\`
          - **Test Suite**: \`${{ steps.parse_comment.outputs.test_suite }}\`
          - **QA Version**: \`${{ github.event.comment.id }}\`

          **Next Steps:**
          1. 🏗️ [Bearded Robot build](https://github.com/CleverTap/CT-Apps/actions) will start with your SDK branch
          2. 📱 APK will be uploaded to BrowserStack
          3. 🧪 Automation tests will run on specified devices (controlled by TestNG XML files)

          **Monitor Progress:**
          - [Build Workflow](https://github.com/CleverTap/CT-Apps/actions)
          - [Automation Workflow](https://github.com/CleverTap-SDK/CleverTap-SDK-Automation/actions)

          _Triggered by: @${{ github.event.comment.user.login }}_"

          curl -s \
            -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments" \
            -d "{\"body\": $(echo "$COMMENT_BODY" | jq -Rs .)}"
          
          echo "💬 Posted confirmation comment to PR"

      - name: Handle invalid comment format
        if: steps.parse_comment.outputs.valid_comment == 'false'
        run: |
          # Only respond if the comment contained "run test automation" but was malformed
          if echo "${{ github.event.comment.body }}" | grep -qi "run test automation"; then
          
            HELP_COMMENT="❌ **Invalid automation trigger format**

            **Expected format:**
            \`\`\`
            run test automation on {buildType} build, {testSuite} tests
            \`\`\`

            **Valid options:**
            - **buildType**: \`debug\` or \`release\`
            - **testSuite**: \`all\`, \`variables\`, \`push-notifications\`, or \`app-inbox\`

            **Examples:**
            - \`run test automation on debug build, variables tests\`
            - \`run test automation on release build, all tests\`
            - \`run test automation on debug build, push-notifications tests\`
            
            Please correct your comment format and try again.

            _Note: Comment parsing is case-insensitive_"

            curl -s \
              -X POST \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments" \
              -d "{\"body\": $(echo "$HELP_COMMENT" | jq -Rs .)}"
          
            echo "💬 Posted help comment for invalid format"
          fi