[versions]
# Project
android_compileSdk = "33"
android_gradle_plugin = "7.4.2"
android_minSdk = "19"
android_targetSdk = "33"
kotlin_plugin = "1.7.20"
sonarqube_plugin = "3.3"
android_buildTools = "33.0.0"
detekt_gradle_plugin = "1.20.0-RC1"
firebase_gradle_crashlytics = "2.8.1"

# AndroidX
annotation = "1.2.0"
appcompat = "1.6.0-rc01"
concurrent_futures = "1.1.0"
constraint_layout = "2.0.1"
coordinator_layout = "1.1.0"
core = "1.9.0"
core_ktx = "1.9.0"
fragment = "1.3.6"
recyclerview = "1.2.1"
viewpager = "1.0.0"
work_runtime = "2.7.1"

#UI
material = "1.4.0"

#Test
espresso_core = "3.3.0"
test_ext_junit = "1.1.3"
test_core = "1.4.0"
test_rules = "1.5.0"
test_runner = "1.5.2"
work_testing = "2.7.1"
truth = "1.1.3"
junit = "4.13"
awaitility = "4.1.0"
kotlin_stdlib_jdk7 = "1.7.20" #check with kotlin_gradle_plugin
kotlin_test = "1.7.20" #check with kotlin_gradle_plugin
junit_jupiter_api = "5.7.2"
junit_jupiter_engine = "5.7.2"
junit_platform_runner = "1.7.2"
mockito_core = "3.5.11"
opentest4j = "1.2.0"
powermock_api_mockito2 = "2.0.9"
powermock_classloading_xstream = "2.0.9"
powermock_core = "2.0.9"
powermock_module_junit4 = "2.0.9"
powermock_module_junit4_rule = "2.0.9"
robolectric = "4.7.3"
jsonassert = "1.5.0"
xmlpull = "1.1.3.1"
mockk = "1.13.5"
uiautomator = "2.3.0-alpha03"

#Install Referrer
installreferrer = "2.2"

#SDK Versions
clevertap_android_sdk = "5.2.1"
clevertap_rendermax_sdk = "1.0.3"
clevertap_geofence_sdk = "1.2.0"
clevertap_hms_sdk = "1.3.3"
clevertap_xiaomi_sdk = "1.5.4"
clevertap_push_templates_sdk = "1.2.0"

# Glide
glide = "4.12.0"

# Exoplayer
exoplayer = "2.17.1"
exoplayer_hls = "2.17.1"
exoplayer_ui = "2.17.1"

#Play Services
play_services_ads = "22.3.0"
play_services_location = "21.0.0"

#Gson
gson = "2.8.6"

#FCM
firebase_messaging = "23.0.6"

#GMS
google_services = "4.3.3"

#HMS Push Plugin/Lib
agcp = "1.9.0.300"
push = "6.11.0.300"

#Catch Exception
catch_exception = "2.0"


[libraries]
# Project
android_gradle_plugin = { module = "com.android.tools.build:gradle", version.ref = "android_gradle_plugin" }
kotlin_gradle_plugin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin_plugin" }
detekt_gradle_plugin = { module = "io.gitlab.arturbosch.detekt:detekt-gradle-plugin" , version.ref= "detekt_gradle_plugin"}
firebase_gradle_crashlytics = { module = "com.google.firebase:firebase-crashlytics-gradle" , version.ref= "firebase_gradle_crashlytics"}

# AndroidX
androidx_annotation = { module = "androidx.annotation:annotation", version.ref = "annotation" }
androidx_appcompat = { module = "androidx.appcompat:appcompat", version.ref = "appcompat" }
androidx_concurrent_futures = { module = "androidx.concurrent:concurrent-futures", version.ref = "concurrent_futures" }
androidx_constraint_layout = { module = "androidx.constraintlayout:constraintlayout", version.ref = "constraint_layout" }
androidx_coordinator_layout = { module = "androidx.coordinatorlayout:coordinatorlayout", version.ref = "coordinator_layout" }
androidx_core_core = { module = "androidx.core:core", version.ref = "core" }
androidx_core_ktx = { module = "androidx.core:core-ktx", version.ref = "core_ktx" }
androidx_fragment = { module = "androidx.fragment:fragment", version.ref = "fragment" }
androidx_recyclerview = { module = "androidx.recyclerview:recyclerview", version.ref = "recyclerview" }
androidx_viewpager = { module = "androidx.viewpager:viewpager", version.ref = "viewpager" }
androidx_work_runtime = { module = "androidx.work:work-runtime", version.ref = "work_runtime" }

#UI
android_material = { module = "com.google.android.material:material", version.ref = "material" }


# Test
test_espresso_core = { module = "androidx.test.espresso:espresso-core", version.ref = "espresso_core" }
test_ext_junit = { module = "androidx.test.ext:junit", version.ref = "test_ext_junit" }
test_core = { module = "androidx.test:core", version.ref = "test_core" }
test_rules = { module = "androidx.test:rules", version.ref = "test_rules" }
test_runner = { module = "androidx.test:runner", version.ref = "test_runner" }
test_work_testing = { module = "androidx.work:work-testing", version.ref = "work_testing" }
test_truth = { module = "com.google.truth:truth", version.ref = "truth" }
test_junit = { module = "junit:junit", version.ref = "junit" }
test_awaitility = { module = "org.awaitility:awaitility", version.ref = "awaitility" }
test_kotlin_test = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin_test" }
test_junit_jupiter_api = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "junit_jupiter_api" }
test_junit_jupiter_engine = { module = "org.junit.jupiter:junit-jupiter-engine", version.ref = "junit_jupiter_engine" }
test_junit_platform_runner = { module = "org.junit.platform:junit-platform-runner", version.ref = "junit_platform_runner" }
test_mockito_core = { module = "org.mockito:mockito-core", version.ref = "mockito_core" }
test_mockito_inline = { module = "org.mockito:mockito-inline", version.ref = "mockito_core" }
test_opentest4j = { module = "org.opentest4j:opentest4j", version.ref = "opentest4j" }
test_powermock_api_mockito2 = { module = "org.powermock:powermock-api-mockito2", version.ref = "powermock_api_mockito2" }
test_powermock_classloading_xstream = { module = "org.powermock:powermock-classloading-xstream", version.ref = "powermock_classloading_xstream" }
test_powermock_core = { module = "org.powermock:powermock-core", version.ref = "powermock_core" }
test_powermock_module_junit4 = { module = "org.powermock:powermock-module-junit4", version.ref = "powermock_module_junit4" }
test_powermock_module_junit4_rule = { module = "org.powermock:powermock-module-junit4-rule", version.ref = "powermock_module_junit4_rule" }
test_robolectric = { module = "org.robolectric:robolectric", version.ref = "robolectric" }
test_jsonassert = { module = "org.skyscreamer:jsonassert", version.ref = "jsonassert" }
test_xmlpull = { module = "xmlpull:xmlpull", version.ref = "xmlpull" }
test_mockk = { module = "io.mockk:mockk", version.ref="mockk"}
test_uiautomator = { module = "androidx.test.uiautomator:uiautomator", version.ref="uiautomator"}

#Kotlin Stdlib
kotlin_stdlib_jdk7 = { module = "org.jetbrains.kotlin:kotlin-stdlib-jdk7", version.ref = "kotlin_stdlib_jdk7" }

#Install Referrer
installreferrer = { module = "com.android.installreferrer:installreferrer", version.ref = "installreferrer" }

#SDK Versions
version_clevertap_android_sdk = { module = "com.clevertap.android:clevertap-android-sdk", version.ref = "clevertap_android_sdk" }
version_clevertap_rendermax_sdk = { module = "com.clevertap.android:clevertap-rendermax-sdk", version.ref = "clevertap_rendermax_sdk" }
version_clevertap_geofence_sdk = { module = "com.clevertap.android:clevertap-geofence-sdk", version.ref = "clevertap_geofence_sdk" }
version_clevertap_hms_sdk = { module = "com.clevertap.android:clevertap-hms-sdk", version.ref = "clevertap_hms_sdk" }
version_clevertap_xiaomi_sdk = { module = "com.clevertap.android:clevertap-xiaomi-sdk", version.ref = "clevertap_xiaomi_sdk" }
version_clevertap_push_templates_sdk = { module = "com.clevertap.android:push-templates", version.ref = "clevertap_push_templates_sdk" }

# Glide
glide = { module = "com.github.bumptech.glide:glide", version.ref = "glide" }

#Exoplayer
exoplayer_exoplayer = { module = "com.google.android.exoplayer:exoplayer", version.ref = "exoplayer" }
exoplayer_hls = { module = "com.google.android.exoplayer:exoplayer-hls", version.ref = "exoplayer_hls" }
exoplayer_ui = { module = "com.google.android.exoplayer:exoplayer-ui", version.ref = "exoplayer_ui" }

#Play Services
play_services_ads = { module = "com.google.android.gms:play-services-ads", version.ref = "play_services_ads" }
play_services_location = { module = "com.google.android.gms:play-services-location", version.ref = "play_services_location" }

#Gson
gson = { module = "com.google.code.gson:gson", version.ref = "gson" }

#FCM
firebase_messaging = { module = "com.google.firebase:firebase-messaging", version.ref = "firebase_messaging" }

#GMS
google_services = { module = "com.google.gms:google-services", version.ref = "google_services" }

#HMS Push Plugin/Lib
huawei_agcp_plugin = { module = "com.huawei.agconnect:agcp", version.ref = "agcp" }
huawei_push = { module = "com.huawei.hms:push", version.ref = "push" }

#Catch Exception
catch_exception = { module = "eu.codearte.catch-exception:catch-exception", version.ref = "catch_exception" }

[bundles]
exoplayer = ["exoplayer_exoplayer", "exoplayer_hls", "exoplayer_ui"]
powermock = ["test_powermock_api_mockito2", "test_powermock_classloading_xstream", "test_powermock_core", "test_powermock_module_junit4", "test_powermock_module_junit4_rule"]
mockito = ["test_mockito_core", "test_mockito_inline"]

[plugins]
sonarqube = { id="org.sonarqube", version.ref = "sonarqube_plugin" }